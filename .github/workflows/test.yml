# Install Python dependencies, run tests and lint.
#
# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  test:

    runs-on:
      - ubuntu-latest

    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # See https://github.com/marketplace/actions/setup-python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # See https://github.com/marketplace/actions/cache
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Set up pip cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-          
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov wheel coverage coveralls
          if [ -f requirements.txt ]; then pip install --prefer-binary -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names.
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings.
          flake8 . --count --exit-zero --max-complexity=10 --statistics

      - name: Run tests
        run: |
          # Install package so that tests can be run.
          pip install .
          # Run tests and collect coverage data.
          python -m pytest
          # Check if we have a coverage report. This should fail if no
          # coverage data was produced by the command above.
          python -m coverage report

      - name: Send coverage data to coveralls.io
        run: |
          python -m coveralls --service=github.com
        env:
          # COVERALLS_REPO_TOKEN helps coveralls identify our project.
          # On GitHub, the variable is set at
          # https://github.com/atlanticwave-sdx/pce/settings/secrets/actions
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
